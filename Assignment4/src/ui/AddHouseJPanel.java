/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Person;
import model.Community;
import model.House;
import model.PatientDirectory;
import model.PersonDirectory;

/**
 *
 * @author aamrah
 */
public class AddHouseJPanel extends javax.swing.JPanel {
    City city;
    PersonDirectory personDir;
    PatientDirectory patientDir;
    int selectedCommunity,selectedPerson;
    ArrayList<Community> communities;
    ArrayList<Person> people, tempPeople,peoplelist;
    Community community;
    Person person;
    House house;
    /**
     * Creates new form AddHouseJPanel
     */
    public AddHouseJPanel(City city, PersonDirectory personDir, PatientDirectory patientDir) {
        initComponents();
        this.city=city;
        this.personDir=personDir;
        this.patientDir=patientDir;
        loadCommunityTable();
        loadPersonDirectory();
        tempPeople= new ArrayList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSave1 = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        tName = new javax.swing.JTextField();
        lblAddhouse = new javax.swing.JLabel();
        jTableAdmin1 = new javax.swing.JScrollPane();
        tblPerson = new javax.swing.JTable();
        lblPickperson = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblCommunity = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblPeople = new javax.swing.JLabel();

        btnSave1.setText("Save");
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("House Name");

        lblAddhouse.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        lblAddhouse.setForeground(new java.awt.Color(255, 255, 255));
        lblAddhouse.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblAddhouse.setText("Add a House");

        tblPerson.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Age", "Phone", "Address", "City", "Pincode", "HouseName"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAdmin1.setViewportView(tblPerson);

        lblPickperson.setForeground(new java.awt.Color(255, 255, 255));
        lblPickperson.setText("Pick a Family member from the list of people and click on Add");

        tblCommunity.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Community"
            }
        ));
        jScrollPane1.setViewportView(tblCommunity);

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Pick a Community");

        btnAdd.setText("Add");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(lblAddhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(166, 166, 166)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblPickperson)
                        .addGap(0, 380, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTableAdmin1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(lblPeople, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(btnSave1))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                                        .addGap(205, 205, 205))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tName, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(lblAddhouse, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(93, 93, 93)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 23, Short.MAX_VALUE)
                .addComponent(lblPickperson)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTableAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnDelete)
                        .addGap(125, 125, 125)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave1)
                    .addComponent(lblPeople, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed
        // TODO add your handling code here:
        
        selectedCommunity = tblCommunity.getSelectedRow();
        if (selectedCommunity < 0 || selectedCommunity>1) {
            JOptionPane.showMessageDialog(null, "Please select 1 community the house is in!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            if(tempPeople==null)
            {
                JOptionPane.showMessageDialog(null, "Please select atleast 1 person who lives in the house!!", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            else if(tName.getText().isBlank())
            {
                JOptionPane.showMessageDialog(null, "Please house name!!", "Warning", JOptionPane.WARNING_MESSAGE);
 
            }
            else
            {
                community=communities.get(selectedCommunity);
                House h=new House(tName.getText());
                h.setPeople(tempPeople);
                for(Person t : tempPeople)
                {
                    t.setResidence(h);
                }
                community.addHouseToList(h);
                
            }
            
        }
    }//GEN-LAST:event_btnSave1ActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        selectedPerson = tblPerson.getSelectedRow();
        
        if (selectedPerson < 0 || selectedPerson>1) {
            JOptionPane.showMessageDialog(null, "Please select 1 person to add!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {
            people =this.personDir.getPeopleDir();
            person= people.get(selectedPerson);
            
            if(!tempPeople.isEmpty())
            {
                for(Person p : tempPeople)
                {
                    if(p.getPersonId()==person.getPersonId())
                    {
                        JOptionPane.showMessageDialog(null, "Person"+person.getPersonName()+" already exists in list", "Warning", JOptionPane.WARNING_MESSAGE);   
                        return;
                    }
                }
                
            }
            tempPeople.add(person);
            lblPeople.setText(lblPeople.getText() +person.getPersonName() + "  ");  
              
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        selectedPerson = tblPerson.getSelectedRow();
        person= tempPeople.get(selectedPerson);
        if (selectedPerson < 0 || selectedPerson>1) {
            JOptionPane.showMessageDialog(null, "Please select 1 person to delete!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else
        {    
                    tempPeople.remove(person);         
                    lblPeople.setText(lblPeople.getText().replace(person.getPersonName(), ""));
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jTableAdmin1;
    private javax.swing.JLabel lblAddhouse;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPeople;
    private javax.swing.JLabel lblPickperson;
    private javax.swing.JTextField tName;
    private javax.swing.JTable tblCommunity;
    private javax.swing.JTable tblPerson;
    // End of variables declaration//GEN-END:variables

    private void loadCommunityTable() {
       DefaultTableModel md=(DefaultTableModel) tblCommunity.getModel();
       md.setRowCount(0);
       communities=this.city.getCommunities();
       Object row[]= new Object[1];
        for(Community c : communities)
        {
            
            row[0]=c.getCommunityName();
            md.addRow(row);
        }         
        
       /* tCertificate.setText(car.getCertificate());
       tName.setText(car.getName());
       tYear.setText(String.valueOf(car.getYear()));
       tSeats.setText(String.valueOf(car.getSeats()));
       tModel.setText(car.getModelNumber());
       tSerial.setText(String.valueOf(car.getSerialNumber()));
       tCompany.setText(car.getCompany());
       tCity.setText(car.getCity());
       if(car.getIsAvailable()==true)
       {
           chckYes.setSelected(true);
       }
       else
       {
           chckNo.setSelected(true);
       }*/
    }

    private void loadPersonDirectory() {
       DefaultTableModel md=(DefaultTableModel) tblPerson.getModel();
       md.setRowCount(0);
       peoplelist=this.personDir.getPeopleDir();
       Object row[]= new Object[7];
        for(Person p : peoplelist)
        {
            row[0]=p.getPersonName();
            row[1]=p.getAge();
            row[2]=p.getPhone();
            row[3]=p.getAddress();
            row[4]=p.getCity().getName();
            row[5]=p.getPincode();
            if(p.getResidence()==null)
            {
                row[6]="Homeless";
            }
            else
            {
                row[6]=p.getResidence().getHomeName();
            }
            md.addRow(row);
        }
    }
}
