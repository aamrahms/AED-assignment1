/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.City;
import model.Patient;
import model.PatientDirectory;
import model.Person;
import model.PersonDirectory;
import model.Encounter;
import model.EncounterHistory;

/**
 *
 * @author aamrah
 */

public class PatientDirJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ModifyJPanel
     */
    City city;
    PersonDirectory personDir;
    PatientDirectory patientDir,tempDir;
    ArrayList<Patient> patients;
    DefaultTableModel md;
    Patient addEncounter;
    EncounterHistory ehist;
    int selectedPatient;
    public PatientDirJPanel(City city, PersonDirectory personDir, PatientDirectory patientDir) {
        initComponents();
        this.city=city;
        this.personDir=personDir;
        this.patientDir=patientDir;
        patients=this.patientDir.getPatientDir();
        tempDir=this.patientDir;
        populateTable(this.patientDir);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUber1 = new javax.swing.JLabel();
        jTableAdmin1 = new javax.swing.JScrollPane();
        tblPatient = new javax.swing.JTable();
        btnAddencounter = new javax.swing.JButton();
        lblName = new javax.swing.JLabel();
        tBp = new javax.swing.JTextField();
        btnSave1 = new javax.swing.JButton();
        lblUber2 = new javax.swing.JLabel();

        lblUber1.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        lblUber1.setForeground(new java.awt.Color(255, 255, 255));
        lblUber1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUber1.setText("Patient Directory");

        tblPatient.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "PatientID", "Age", "Phone", "Address", "City", "Pincode"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAdmin1.setViewportView(tblPatient);

        btnAddencounter.setText("Add an Encounter");
        btnAddencounter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddencounterActionPerformed(evt);
            }
        });

        lblName.setForeground(new java.awt.Color(255, 255, 255));
        lblName.setText("Enter blood pressure");

        btnSave1.setText("Save");
        btnSave1.setEnabled(false);
        btnSave1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSave1ActionPerformed(evt);
            }
        });

        lblUber2.setFont(new java.awt.Font("Arial Black", 1, 24)); // NOI18N
        lblUber2.setForeground(new java.awt.Color(255, 255, 255));
        lblUber2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUber2.setText("Encounter Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnSave1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(307, 307, 307)
                        .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, 132, Short.MAX_VALUE)
                        .addGap(34, 34, 34)
                        .addComponent(tBp, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(338, 338, 338))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(192, 192, 192)
                        .addComponent(lblUber1, javax.swing.GroupLayout.PREFERRED_SIZE, 468, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(251, 251, 251)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblUber2, javax.swing.GroupLayout.PREFERRED_SIZE, 345, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addComponent(btnAddencounter)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(3, 3, 3)
                    .addComponent(jTableAdmin1)
                    .addGap(3, 3, 3)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(lblUber1, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(305, 305, 305)
                .addComponent(btnAddencounter)
                .addGap(56, 56, 56)
                .addComponent(lblUber2, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tBp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblName))
                .addGap(32, 32, 32)
                .addComponent(btnSave1)
                .addContainerGap(253, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(141, 141, 141)
                    .addComponent(jTableAdmin1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(527, Short.MAX_VALUE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddencounterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddencounterActionPerformed
        // TODO add your handling code here:
        btnSave1.setEnabled(true);
        
        selectedPatient = tblPatient.getSelectedRow();
        if (selectedPatient < 0) {
            JOptionPane.showMessageDialog(null, "Please select a patient for the encounter!!", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        else{
            
        }
    }//GEN-LAST:event_btnAddencounterActionPerformed

    private void btnSave1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSave1ActionPerformed
        // TODO add your handling code here:
            addEncounter=patients.get(selectedPatient);
            int uniqueID=addEncounter.getPatientId();
            Encounter encounter=new Encounter(Integer.parseInt(tBp.getText()));
            ehist=checkifEncounterHistory(addEncounter);  
            addEncounter.getEncounterhistory().getEncounters().add(encounter);
            //this.patientDir.addPatient(addEncounter);
            populateTable(this.patientDir);
    }//GEN-LAST:event_btnSave1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddencounter;
    private javax.swing.JButton btnSave1;
    private javax.swing.JScrollPane jTableAdmin1;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblUber1;
    private javax.swing.JLabel lblUber2;
    private javax.swing.JTextField tBp;
    private javax.swing.JTable tblPatient;
    // End of variables declaration//GEN-END:variables
public void populateTable(PatientDirectory patientDir){
        
        md=(DefaultTableModel)tblPatient.getModel();
        md.setRowCount(0);
        
        //int rowCount=populate.size();
        Object row[]= new Object[7];
        for(Patient p : patients)
        {
            
            row[0]=p.getPerson().getPersonName();
            row[1]=p.getPerson().getPatientId();
            row[2]=p.getPerson().getAge();
            row[3]=p.getPerson().getPhone();
            row[4]=p.getPerson().getAddress();
            row[5]=p.getPerson().getCity().getName();
            row[6]=p.getPerson().getPincode();
            
            md.addRow(row);
                   
        }
    }

    private EncounterHistory checkifEncounterHistory(Patient p) {
        EncounterHistory ehist;
        if(p.getEncounterhistory().getEncounters().isEmpty())
        {
            ehist=new EncounterHistory();
            p.setEncounterhistory(ehist);
        }
        else
        {
            return p.getEncounterhistory();
        }
        return p.getEncounterhistory();    
    }


}
