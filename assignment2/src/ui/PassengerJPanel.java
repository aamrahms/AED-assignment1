/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import java.awt.CardLayout;
import java.text.DateFormat;
import java.text.ParsePosition;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.Car;
import model.Fleet;

/**
 *
 * @author aamrah
 */
public class PassengerJPanel extends javax.swing.JPanel {

    /**
     * Creates new form PassengerJPanel
     */
    Fleet fleet, search;
    String expiry="01-01-2017";
    public ArrayList<Car> populate;
     public PassengerJPanel(Fleet fleet , Fleet search) {
        initComponents();
        this.fleet=fleet;
        this.search=search;
        populateTable(fleet);
    }
     public void populateTable(Fleet fleet){
        
        DefaultTableModel md=(DefaultTableModel) jTable1.getModel();
        md.setRowCount(0);
        populate=fleet.getAllCars();
        //int rowCount=populate.size();
        Object row[]= new Object[9];
        for(Car c : populate)
        {
            
            row[0]=c.getCompany();
            row[1]=c.getName();
            row[2]=c.getYear();
            row[3]=c.getSerialNumber();
            row[4]=c.getModelNumber();
            row[5]=c.getCity();
            row[6]=c.getCertificate();
            row[7]=c.getSeats();
            if(c.getIsAvailable()==true)
            {
                row[8]="Available";
            }
            else
            {
                row[8]="Not Available";
            }
            md.addRow(row);
                   
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblUber = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        btnAllavailablecars = new javax.swing.JButton();
        btnExpired = new javax.swing.JButton();
        btnLastupdated = new javax.swing.JButton();
        lblLastupdated = new javax.swing.JLabel();
        lblInstruction = new javax.swing.JLabel();
        lblSearch = new javax.swing.JLabel();
        tScity = new javax.swing.JTextField();
        btnScity = new javax.swing.JButton();
        tScompany = new javax.swing.JTextField();
        btnScompany = new javax.swing.JButton();
        btnValid = new javax.swing.JButton();
        tSyear = new javax.swing.JTextField();
        btnSyear = new javax.swing.JButton();
        tSmodel = new javax.swing.JTextField();
        btnSmodel = new javax.swing.JButton();
        lblSeats = new javax.swing.JLabel();
        lblMin = new javax.swing.JLabel();
        tmin = new javax.swing.JTextField();
        lblMax = new javax.swing.JLabel();
        tmax = new javax.swing.JTextField();
        btnSseats = new javax.swing.JButton();
        tSserial = new javax.swing.JTextField();
        btnSserial = new javax.swing.JButton();
        btnAllcars = new javax.swing.JButton();
        btnAssigned = new javax.swing.JButton();
        btnFirst = new javax.swing.JButton();
        chckPick = new javax.swing.JCheckBox();
        btnAllcompany = new javax.swing.JButton();

        lblUber.setFont(new java.awt.Font("Arial Black", 1, 48)); // NOI18N
        lblUber.setForeground(new java.awt.Color(255, 255, 255));
        lblUber.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblUber.setText("UBER");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Company", "Name", "Year of Make", "Serial Number", "Model Number", "City", "Certificate Date", "Seats", "Availability"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        btnAllavailablecars.setText("All Available Cars");
        btnAllavailablecars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllavailablecarsActionPerformed(evt);
            }
        });

        btnExpired.setText("Cars with Expired Maintenance Certificate");
        btnExpired.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpiredActionPerformed(evt);
            }
        });

        btnLastupdated.setText("Time of Last Update");
        btnLastupdated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLastupdatedActionPerformed(evt);
            }
        });

        lblLastupdated.setForeground(new java.awt.Color(255, 255, 255));
        lblLastupdated.setSize(new java.awt.Dimension(4, 4));

        lblInstruction.setForeground(new java.awt.Color(255, 255, 255));
        lblInstruction.setText("Click below buttons to see :");

        lblSearch.setForeground(new java.awt.Color(255, 255, 255));
        lblSearch.setText("Search for specific entry :");

        btnScity.setText("City?");
        btnScity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScityActionPerformed(evt);
            }
        });

        tScompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tScompanyActionPerformed(evt);
            }
        });

        btnScompany.setText("Company?");
        btnScompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnScompanyActionPerformed(evt);
            }
        });

        btnValid.setText("Cars with Valid Maintenance Certificate");
        btnValid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnValidActionPerformed(evt);
            }
        });

        btnSyear.setText("Year of Make?");
        btnSyear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSyearActionPerformed(evt);
            }
        });

        tSmodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSmodelActionPerformed(evt);
            }
        });

        btnSmodel.setText("Model Number?");
        btnSmodel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSmodelActionPerformed(evt);
            }
        });

        lblSeats.setForeground(new java.awt.Color(255, 255, 255));
        lblSeats.setText("Seats");

        lblMin.setForeground(new java.awt.Color(255, 255, 255));
        lblMin.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMin.setText("Min");

        lblMax.setForeground(new java.awt.Color(255, 255, 255));
        lblMax.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMax.setText("Max");

        btnSseats.setText("Seats?");
        btnSseats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSseatsActionPerformed(evt);
            }
        });

        tSserial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tSserialActionPerformed(evt);
            }
        });

        btnSserial.setText("Serial Number?");
        btnSserial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSserialActionPerformed(evt);
            }
        });

        btnAllcars.setText("All Cars");
        btnAllcars.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllcarsActionPerformed(evt);
            }
        });

        btnAssigned.setText("Assigned Cars");
        btnAssigned.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignedActionPerformed(evt);
            }
        });

        btnFirst.setText("Find the first Available Car");
        btnFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFirstActionPerformed(evt);
            }
        });

        chckPick.setForeground(new java.awt.Color(255, 255, 255));
        chckPick.setText("Pick Ride?");
        chckPick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chckPickActionPerformed(evt);
            }
        });

        btnAllcompany.setText("List All Manufacturers");
        btnAllcompany.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllcompanyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(btnAllavailablecars, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAssigned, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAllcars, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(lblInstruction))
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnExpired, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chckPick)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblLastupdated, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
                    .addComponent(btnLastupdated, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAllcompany, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(28, 28, 28))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(220, 220, 220)
                            .addComponent(lblUber, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(0, 0, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(38, 38, 38)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblSeats)
                                        .addComponent(lblSearch))
                                    .addGap(521, 678, Short.MAX_VALUE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                    .addComponent(tScompany, javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(tScity, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                    .addComponent(lblMax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                    .addComponent(tmax, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(btnScompany, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnScity, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(tmin, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(lblMin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(85, 85, 85)
                                            .addComponent(btnSseats, javax.swing.GroupLayout.DEFAULT_SIZE, 239, Short.MAX_VALUE)
                                            .addGap(155, 155, 155)))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(tSserial)
                                            .addGap(18, 18, 18)
                                            .addComponent(btnSserial))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(tSmodel, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(tSyear, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(btnSmodel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnSyear, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                    .addGap(39, 39, 39)))))
                    .addContainerGap()))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(463, Short.MAX_VALUE)
                .addComponent(lblInstruction)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExpired)
                    .addComponent(btnAllcars)
                    .addComponent(btnAllcompany))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnValid)
                    .addComponent(btnAllavailablecars)
                    .addComponent(btnLastupdated))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLastupdated, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnAssigned)
                        .addComponent(btnFirst)
                        .addComponent(chckPick)))
                .addGap(310, 310, 310))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(68, 68, 68)
                    .addComponent(lblUber, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(26, 26, 26)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 286, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 157, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(lblSearch)
                            .addGap(27, 27, 27)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tScity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnScity))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tScompany, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnScompany)))
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tSyear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSyear))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(tSmodel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnSmodel))))
                    .addGap(29, 29, 29)
                    .addComponent(lblSeats)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tmin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tmax, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSseats)
                        .addComponent(tSserial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSserial))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblMin)
                        .addComponent(lblMax))
                    .addGap(69, 69, 69)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnExpiredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpiredActionPerformed
        // TODO add your handling code here:
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            String aExpiry=a.getCertificate();
            DateFormat f = new SimpleDateFormat("dd-mm-yyyy");
            Date d1 = f.parse(aExpiry, new ParsePosition(0));
            Date d2 = f.parse(expiry, new ParsePosition(0));
            if(d2.compareTo(d1) > 0)
            {
                search.addCar(a);
            }
        }
        populateTable(search);
        
    }//GEN-LAST:event_btnExpiredActionPerformed

    private void tScompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tScompanyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tScompanyActionPerformed

    private void btnScompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScompanyActionPerformed
        // TODO add your handling code here:
         String query=tScompany.getText();
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            
            if(a.getCompany().equalsIgnoreCase(query))
            {
                search.addCar(a);
            }
        }
        populateTable(search);
        
    }//GEN-LAST:event_btnScompanyActionPerformed

    private void btnValidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnValidActionPerformed
        // TODO add your handling code here:
        search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            String aExpiry=a.getCertificate();
            DateFormat f = new SimpleDateFormat("dd-mm-yyyy");
            Date d1 = f.parse(aExpiry, new ParsePosition(0));
            Date d2 = f.parse(expiry, new ParsePosition(0));
            if(d2.compareTo(d1) < 0)
            {
                search.addCar(a);
            }
        }
        populateTable(search);
        
    }//GEN-LAST:event_btnValidActionPerformed

    private void tSmodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSmodelActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tSmodelActionPerformed

    private void btnSmodelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSmodelActionPerformed
        // TODO add your handling code here:
         String query=tSmodel.getText();
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            
            if(a.getModelNumber().equalsIgnoreCase(query))
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnSmodelActionPerformed

    private void btnSyearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSyearActionPerformed
        // TODO add your handling code here:
         String query=tSyear.getText();
         String year;
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            year=String.valueOf(a.getYear());
            if(year.equalsIgnoreCase(query))
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnSyearActionPerformed

    private void tSserialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tSserialActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tSserialActionPerformed

    private void btnSserialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSserialActionPerformed
        // TODO add your handling code here:
         double number=Double.parseDouble(tSserial.getText());
         String query=String.valueOf(number);
         String serial;
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            serial=String.valueOf(a.getSerialNumber());
            if(serial.equalsIgnoreCase(query))
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnSserialActionPerformed

    private void btnLastupdatedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLastupdatedActionPerformed
        // TODO add your handling code here:
        lblLastupdated.setText(fleet.getLastUpdated());
        
    }//GEN-LAST:event_btnLastupdatedActionPerformed

    private void btnAllavailablecarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllavailablecarsActionPerformed
        // TODO add your handling code here:
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            if(a.getIsAvailable()==true)
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnAllavailablecarsActionPerformed

    private void btnScityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnScityActionPerformed
        // TODO add your handling code here:
         String query=tScity.getText();
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            if(a.getCity().equalsIgnoreCase(query))
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnScityActionPerformed

    private void btnSseatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSseatsActionPerformed
        // TODO add your handling code here:
        search=new Fleet();
        if( !tmin.getText().isEmpty())
        {
            if(!tmax.getText().isEmpty())
            {
                int test=1; 
                int min=Integer.parseInt(tmin.getText());
                int max=Integer.parseInt(tmax.getText());
                for( Car a : populate)
                {
                    int query=a.getSeats();
                    if((query>min || query==min)&& (query<=max || query==max))
                    {
                      search.addCar(a);
                    }
                    else
                    {
                        test=2;
                    }
                }
                populateTable(search);
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Please enter both minimum and maximum seat requirement!!", "Warning", JOptionPane.WARNING_MESSAGE);
        
            }    
        }
        else
        {
            JOptionPane.showMessageDialog(null, "Please enter both minimum and maximum seat requirement!!", "Warning", JOptionPane.WARNING_MESSAGE);
        
        }
    }//GEN-LAST:event_btnSseatsActionPerformed

    private void btnAssignedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignedActionPerformed
        // TODO add your handling code here:
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            if(a.getIsAvailable()==false)
            {
                search.addCar(a);
            }
        }
        populateTable(search);
    }//GEN-LAST:event_btnAssignedActionPerformed

    private void btnAllcarsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllcarsActionPerformed
        // TODO add your handling code here:
        populateTable(fleet);
    }//GEN-LAST:event_btnAllcarsActionPerformed

    private void btnFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFirstActionPerformed
        // TODO add your handling code here:
         search=new Fleet();
         populate=fleet.getAllCars();
         for( Car a : populate)
        {
            if(a.getIsAvailable()==true)
            {
                search.addCar(a);
                break;
            }
        }
        populateTable(search);
        
    }//GEN-LAST:event_btnFirstActionPerformed

    private void chckPickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chckPickActionPerformed
        // TODO add your handling code here:
        DefaultTableModel md=(DefaultTableModel) jTable1.getModel();
        int selectedRow = jTable1.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a Car !!", "Warning", JOptionPane.WARNING_MESSAGE);
            chckPick.setSelected(false);
        }
        else{
            Car Pickedcar=populate.get(selectedRow);
            int uniqueID=Pickedcar.getUniqueID();
            Pickedcar.setIsAvailable(false);
            fleet.updateCar(Pickedcar, uniqueID);
            md.setRowCount(0);
            JOptionPane.showMessageDialog(this, "Your ride has been Booked!");
            chckPick.setSelected(false);
       
            
        }
    }//GEN-LAST:event_chckPickActionPerformed

    private void btnAllcompanyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllcompanyActionPerformed
        // TODO add your handling code here:
        DefaultTableModel md=(DefaultTableModel) jTable1.getModel(); 
        md.setRowCount(0);
        Object row[]= new Object[9];
         populate=fleet.getAllCars();
         for( Car a : populate)
         {
            
            row[0]= a.getCompany();
            md.addRow(row);  
        }
         
        
         
    }//GEN-LAST:event_btnAllcompanyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAllavailablecars;
    private javax.swing.JButton btnAllcars;
    private javax.swing.JButton btnAllcompany;
    private javax.swing.JButton btnAssigned;
    private javax.swing.JButton btnExpired;
    private javax.swing.JButton btnFirst;
    private javax.swing.JButton btnLastupdated;
    private javax.swing.JButton btnScity;
    private javax.swing.JButton btnScompany;
    private javax.swing.JButton btnSmodel;
    private javax.swing.JButton btnSseats;
    private javax.swing.JButton btnSserial;
    private javax.swing.JButton btnSyear;
    private javax.swing.JButton btnValid;
    private javax.swing.JCheckBox chckPick;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblInstruction;
    private javax.swing.JLabel lblLastupdated;
    private javax.swing.JLabel lblMax;
    private javax.swing.JLabel lblMin;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblSeats;
    private javax.swing.JLabel lblUber;
    private javax.swing.JTextField tScity;
    private javax.swing.JTextField tScompany;
    private javax.swing.JTextField tSmodel;
    private javax.swing.JTextField tSserial;
    private javax.swing.JTextField tSyear;
    private javax.swing.JTextField tmax;
    private javax.swing.JTextField tmin;
    // End of variables declaration//GEN-END:variables

    
}
